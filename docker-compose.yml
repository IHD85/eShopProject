version: '3.9'

services:
  # ======================
  # RABBITMQ BROKER
  # ======================
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    env_file:
      - ./.docker/env/rabbit.env
    ports:
      - "5672:5672"   # Message broker
      - "15672:15672" # Web UI
    networks:
      - eshop-network

  # ======================
  # REDIS (Basket Cache)
  # ======================
  redis:
    image: redis:7
    container_name: redis
    restart: always
    env_file:
      - ./.docker/env/redis.env
    ports:
      - "6379:6379"
    networks:
      - eshop-network

  # ======================
  # POSTGRESQL DATABASES
  # ======================

  catalog-db:
    image: postgres:16
    container_name: catalog-db
    restart: always
    env_file:
      - ./.docker/env/postgres.env
    environment:
      POSTGRES_DB: CatalogDb
    volumes:
      - catalog_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - eshop-network

  basket-db:
    image: postgres:16
    container_name: basket-db
    restart: always
    env_file:
      - ./.docker/env/postgres.env
    environment:
      POSTGRES_DB: BasketDb
    volumes:
      - basket_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - eshop-network

  order-db:
    image: postgres:16
    container_name: order-db
    restart: always
    env_file:
      - ./.docker/env/postgres.env
    environment:
      POSTGRES_DB: OrderDb
    volumes:
      - order_data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    networks:
      - eshop-network

  identity-db:
    image: postgres:16
    container_name: identity-db
    restart: always
    env_file:
      - ./.docker/env/postgres.env
    environment:
      POSTGRES_DB: IdentityDb
    volumes:
      - identity_data:/var/lib/postgresql/data
    ports:
      - "5436:5432"
    networks:
      - eshop-network

  # ======================
  # BASKET MICRO SERVICE
  # ======================
  basket-api:
    build:
      context: .
      dockerfile: eShop.Basket.API/Dockerfile
    container_name: basket-api
    depends_on:
      - basket-db
      - rabbitmq
      - redis
    environment:
      ASPNETCORE_ENVIRONMENT: "Docker"
      ConnectionStrings__BasketDb: "Host=basket-db;Port=5432;Database=BasketDb;Username=basket;Password=basket"
      Redis__Host: "redis"
      Redis__Port: "6379"
      RabbitMQ__Host: "rabbitmq"
      RabbitMQ__Username: "guest"
      RabbitMQ__Password: "guest"
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - eshop-network
    restart: always

  # ======================
  # ORDER MICRO SERVICE
  # ======================
  order-api:
    build:
      context: .
      dockerfile: eShop.Order.API/Dockerfile
    container_name: order-api
    depends_on:
      - order-db
      - rabbitmq
    environment:
      ASPNETCORE_ENVIRONMENT: "Docker"
      ConnectionStrings__OrderDb: "Host=order-db;Port=5432;Database=OrderDb;Username=order;Password=order"
      RabbitMQ__Host: "rabbitmq"
      RabbitMQ__Username: "guest"
      RabbitMQ__Password: "guest"
    ports:
      - "8082:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - eshop-network
    restart: always

  # ======================
  # GATEWAY (YARP)
  # ======================
  gateway:
    build:
      context: .
      dockerfile: Gateway.Api/Dockerfile
    container_name: gateway
    depends_on:
      - basket-api
      - order-api
      - rabbitmq
    environment:
      ASPNETCORE_ENVIRONMENT: "Docker"
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://basket-api:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    networks:
      - eshop-network

# ======================
# NETWORKS & VOLUMES
# ======================
networks:
  eshop-network:
    driver: bridge

volumes:
  catalog_data:
  basket_data:
  order_data:
  identity_data:
